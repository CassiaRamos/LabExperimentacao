{"ast":null,"code":"import _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/home/ritars/LabExperimentacao/mining/src/App.js\";\nimport React, { Component } from 'react';\nimport { CSVLink } from \"react-csv\";\nimport { createGlobalStyle } from 'styled-components';\nimport Login from './Login';\nimport Button from './Button';\nvar after = \"\",\n    resposta = [],\n    atual = 0,\n    repos,\n    resultado,\n    csv;\nconst limite = 1010;\nconst receivedToken = localStorage.getItem('token');\nconst accessToken = 'bearer' + localStorage.getItem('token');\nconst headers = [{\n  label: 'nameWithOwner',\n  key: 'nameWithOwner'\n}, {\n  label: 'createdAt',\n  key: 'createdAt'\n}, {\n  label: 'pullRequests',\n  key: 'pullRequests.totalCount'\n}, {\n  label: 'releases',\n  key: 'releases.totalCount'\n}, {\n  label: 'updatedAt',\n  key: 'updatedAt'\n}, {\n  label: 'primaryLanguage',\n  key: 'primaryLanguage.name'\n}, {\n  label: 'closedIssues',\n  key: 'closedIssues.totalCount'\n}, {\n  label: 'totalIssues',\n  key: 'totalIssues.totalCount'\n}, {\n  label: 'stargazers',\n  key: 'stargazers.totalCount'\n}];\nconst Global = createGlobalStyle({\n  body: {\n    backgroundColor: '#fff',\n    color: '#000',\n    fontFamily: '\"Segoe UI\", \"Roboto\"',\n    padding: 0,\n    margin: 0,\n    borderTop: '4px solid purple'\n  },\n  '*': {\n    boxSizing: 'border-box'\n  }\n});\n\nfunction replacer(key, value) {\n  if (value === null) {\n    return \" \";\n  }\n\n  return value;\n}\n\nvar _StyledSection = _styled(\"section\").withConfig({\n  displayName: \"App___StyledSection\",\n  componentId: \"pmrry0-0\"\n})({\n  width: '100%',\n  maxWidth: 420,\n  margin: '0 auto',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  height: 'calc(100vh - 4px)',\n  fontFamily: 'monospace',\n  padding: '0 16px'\n});\n\nvar _StyledButton = _styled(Button).withConfig({\n  displayName: \"App___StyledButton\",\n  componentId: \"pmrry0-1\"\n})({\n  display: 'grid',\n  gridTemplateColumns: '80px repeat(auto-fit, 300px)',\n  height: 'calc(5vh - 4px)',\n  overflow: 'hidden',\n  alignItems: 'center',\n  margin: '20px'\n});\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loadButton: false\n    };\n  }\n\n  componentDidMount() {\n    const getResultado = async () => {\n      try {\n        const query = `query RepositoriosPopulares {\n                search(query: \"stars:>100\", type: REPOSITORY, first:10${after}) {\n                  pageInfo {\n                    hasNextPage\n                    endCursor\n                  }\n                  nodes {\n                    ... on Repository {\n                      nameWithOwner\n                      createdAt\n                      pullRequests (states: MERGED){\n                        totalCount\n                      }\n                      releases {\n                        totalCount\n                      }\n                      updatedAt\n                      primaryLanguage {\n                        name\n                      }\n                      closedIssues: issues(states: CLOSED) {\n                        totalCount\n                      }\n                      totalIssues: issues {\n                        totalCount\n                      }\n                      stargazers {\n                        totalCount\n                      }\n                    }\n                  }\n                }\n              }`;\n        repos = await fetch('http://api.github.com/graphql', {\n          method: 'POST',\n          headers: {\n            Authorization: accessToken\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        }).then(res => res.json());\n        resultado = repos.data.search;\n\n        if (resultado.pageInfo.hasNextPage && atual < limite) {\n          after = `, after: \"${resultado.pageInfo.endCursor}\"`;\n          resposta = resposta.concat(resultado.nodes);\n          atual += 10;\n          console.log(\"Dados retornados: \" + atual);\n          await getResultado();\n        } else {\n          csv = JSON.stringify(resposta, replacer);\n          csv = JSON.parse(csv);\n          this.setState({\n            loadButton: true\n          });\n        }\n      } catch (e) {\n        console.log(e);\n        await getResultado();\n      }\n    };\n\n    getResultado();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Global, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), receivedToken ? React.createElement(_StyledSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.loadButton ? React.createElement(CSVLink, {\n      data: csv,\n      headers: headers,\n      filename: \"repositorios.csv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Download CSV\") : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Loading...\")), React.createElement(_StyledButton, {\n      onClick: () => {\n        localStorage.clear();\n        window.location.reload();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"SAIR\")) : React.createElement(Login, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ritars/LabExperimentacao/mining/src/App.js"],"names":["React","Component","CSVLink","createGlobalStyle","Login","Button","after","resposta","atual","repos","resultado","csv","limite","receivedToken","localStorage","getItem","accessToken","headers","label","key","Global","body","backgroundColor","color","fontFamily","padding","margin","borderTop","boxSizing","replacer","value","width","maxWidth","display","alignItems","justifyContent","height","gridTemplateColumns","overflow","App","state","loadButton","componentDidMount","getResultado","query","fetch","method","Authorization","JSON","stringify","then","res","json","data","search","pageInfo","hasNextPage","endCursor","concat","nodes","console","log","parse","setState","e","render","clear","window","location","reload"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAIC,KAAK,GAAG,EAAZ;AAAA,IAAgBC,QAAQ,GAAG,EAA3B;AAAA,IAA+BC,KAAK,GAAG,CAAvC;AAAA,IAA0CC,KAA1C;AAAA,IAAiDC,SAAjD;AAAA,IAA4DC,GAA5D;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAtB;AACA,MAAMC,WAAW,GAAG,WAAWF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA/B;AACA,MAAME,OAAO,GAAG,CACd;AAAEC,EAAAA,KAAK,EAAE,eAAT;AAA0BC,EAAAA,GAAG,EAAE;AAA/B,CADc,EAEd;AAAED,EAAAA,KAAK,EAAE,WAAT;AAAsBC,EAAAA,GAAG,EAAE;AAA3B,CAFc,EAGd;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,GAAG,EAAE;AAA9B,CAHc,EAId;AAAED,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,GAAG,EAAE;AAA1B,CAJc,EAKd;AAAED,EAAAA,KAAK,EAAE,WAAT;AAAsBC,EAAAA,GAAG,EAAE;AAA3B,CALc,EAMd;AAAED,EAAAA,KAAK,EAAE,iBAAT;AAA4BC,EAAAA,GAAG,EAAE;AAAjC,CANc,EAOd;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,GAAG,EAAE;AAA9B,CAPc,EAQd;AAAED,EAAAA,KAAK,EAAE,aAAT;AAAwBC,EAAAA,GAAG,EAAE;AAA7B,CARc,EASd;AAAED,EAAAA,KAAK,EAAE,YAAT;AAAuBC,EAAAA,GAAG,EAAE;AAA5B,CATc,CAAhB;AAWA,MAAMC,MAAM,GAAGjB,iBAAiB,CAAC;AAC/BkB,EAAAA,IAAI,EAAE;AACJC,IAAAA,eAAe,EAAE,MADb;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,UAAU,EAAE,sBAHR;AAIJC,IAAAA,OAAO,EAAE,CAJL;AAKJC,IAAAA,MAAM,EAAE,CALJ;AAMJC,IAAAA,SAAS,EAAE;AANP,GADyB;AAS/B,OAAK;AACHC,IAAAA,SAAS,EAAE;AADR;AAT0B,CAAD,CAAhC;;AAcA,SAASC,QAAT,CAAkBV,GAAlB,EAAuBW,KAAvB,EAA8B;AAC5B,MAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAO,GAAP;AACD;;AACD,SAAOA,KAAP;AACD;;;;;GAoFc;AACHC,EAAAA,KAAK,EAAE,MADJ;AAEHC,EAAAA,QAAQ,EAAE,GAFP;AAGHN,EAAAA,MAAM,EAAE,QAHL;AAIHO,EAAAA,OAAO,EAAE,MAJN;AAKHC,EAAAA,UAAU,EAAE,QALT;AAMHC,EAAAA,cAAc,EAAE,QANb;AAOHC,EAAAA,MAAM,EAAE,mBAPL;AAQHZ,EAAAA,UAAU,EAAE,WART;AASHC,EAAAA,OAAO,EAAE;AATN,C;;;;;GAwBE;AACHQ,EAAAA,OAAO,EAAE,MADN;AAEHI,EAAAA,mBAAmB,EAAE,8BAFlB;AAGHD,EAAAA,MAAM,EAAE,iBAHL;AAIHE,EAAAA,QAAQ,EAAE,QAJP;AAKHJ,EAAAA,UAAU,EAAE,QALT;AAMHR,EAAAA,MAAM,EAAE;AANL,C;;AAzGjB,MAAMa,GAAN,SAAkBtC,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BuC,KAD0B,GAClB;AACNC,MAAAA,UAAU,EAAE;AADN,KADkB;AAAA;;AAK1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,YAAY,GAAG,YAAY;AAC/B,UAAI;AACF,cAAMC,KAAK,GAAI;wEACiDtC,KAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBADtE;AAkCJG,QAAAA,KAAK,GAAG,MAAMoC,KAAK,CAAC,+BAAD,EAAkC;AACnDC,UAAAA,MAAM,EAAE,MAD2C;AAEnD7B,UAAAA,OAAO,EAAE;AACP8B,YAAAA,aAAa,EAAE/B;AADR,WAF0C;AAKnDK,UAAAA,IAAI,EAAE2B,IAAI,CAACC,SAAL,CAAe;AACnBL,YAAAA,KAAK,EAAEA;AADY,WAAf;AAL6C,SAAlC,CAAL,CASbM,IATa,CASRC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EATC,CAAd;AAWE1C,QAAAA,SAAS,GAAGD,KAAK,CAAC4C,IAAN,CAAWC,MAAvB;;AACE,YAAI5C,SAAS,CAAC6C,QAAV,CAAmBC,WAAnB,IAAkChD,KAAK,GAAGI,MAA9C,EAAsD;AACpDN,UAAAA,KAAK,GAAI,aAAYI,SAAS,CAAC6C,QAAV,CAAmBE,SAAU,GAAlD;AACAlD,UAAAA,QAAQ,GAAGA,QAAQ,CAACmD,MAAT,CAAgBhD,SAAS,CAACiD,KAA1B,CAAX;AACAnD,UAAAA,KAAK,IAAI,EAAT;AACAoD,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBrD,KAAnC;AACA,gBAAMmC,YAAY,EAAlB;AACD,SAND,MAMO;AACLhC,UAAAA,GAAG,GAAGqC,IAAI,CAACC,SAAL,CAAe1C,QAAf,EAAyBsB,QAAzB,CAAN;AACAlB,UAAAA,GAAG,GAAGqC,IAAI,CAACc,KAAL,CAAWnD,GAAX,CAAN;AACA,eAAKoD,QAAL,CAAc;AACZtB,YAAAA,UAAU,EAAE;AADA,WAAd;AAGD;AACF,OA5DD,CA4DE,OAAOuB,CAAP,EAAU;AACVJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACA,cAAMrB,YAAY,EAAlB;AACD;AACF,KAjED;;AAkEAA,IAAAA,YAAY;AACb;;AAEDsB,EAAAA,MAAM,GAAG;AACP,WACE,0CACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEGpD,aAAa,GACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK2B,KAAL,CAAWC,UAAX,GACD,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAE9B,GAAf;AAAoB,MAAA,OAAO,EAAEM,OAA7B;AAAsC,MAAA,QAAQ,EAAE,kBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADC,GAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALH,CAbA,EAoBA;AACE,MAAA,OAAO,EAAE,MAAM;AACbH,QAAAA,YAAY,CAACoD,KAAb;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBA,CADY,GAsCR,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCR,CADF;AA6CD;;AAzHyB;;AA4H5B,eAAe9B,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport 'styled-components/macro';\nimport { CSVLink } from \"react-csv\";\nimport { createGlobalStyle } from 'styled-components';\nimport Login from './Login';\nimport Button from './Button';\n\nvar after = \"\", resposta = [], atual = 0, repos, resultado, csv;\nconst limite = 1010;\nconst receivedToken = localStorage.getItem('token');\nconst accessToken = 'bearer' + localStorage.getItem('token')\nconst headers = [\n  { label: 'nameWithOwner', key: 'nameWithOwner' },\n  { label: 'createdAt', key: 'createdAt' },\n  { label: 'pullRequests', key: 'pullRequests.totalCount' },\n  { label: 'releases', key: 'releases.totalCount' },\n  { label: 'updatedAt', key: 'updatedAt' },\n  { label: 'primaryLanguage', key: 'primaryLanguage.name'},\n  { label: 'closedIssues', key: 'closedIssues.totalCount' },\n  { label: 'totalIssues', key: 'totalIssues.totalCount' },\n  { label: 'stargazers', key: 'stargazers.totalCount' },\n];\nconst Global = createGlobalStyle({\n  body: {\n    backgroundColor: '#fff',\n    color: '#000',\n    fontFamily: '\"Segoe UI\", \"Roboto\"',\n    padding: 0,\n    margin: 0,\n    borderTop: '4px solid purple',\n  },\n  '*': {\n    boxSizing: 'border-box',\n  },\n})\n\nfunction replacer(key, value) {\n  if (value === null) {\n    return \" \";\n  }\n  return value;\n}\n\n\nclass App extends Component {\n  state = {\n    loadButton: false\n  }\n\n  componentDidMount() {\n    const getResultado = async () => {\n      try {\n        const query = `query RepositoriosPopulares {\n                search(query: \"stars:>100\", type: REPOSITORY, first:10${after}) {\n                  pageInfo {\n                    hasNextPage\n                    endCursor\n                  }\n                  nodes {\n                    ... on Repository {\n                      nameWithOwner\n                      createdAt\n                      pullRequests (states: MERGED){\n                        totalCount\n                      }\n                      releases {\n                        totalCount\n                      }\n                      updatedAt\n                      primaryLanguage {\n                        name\n                      }\n                      closedIssues: issues(states: CLOSED) {\n                        totalCount\n                      }\n                      totalIssues: issues {\n                        totalCount\n                      }\n                      stargazers {\n                        totalCount\n                      }\n                    }\n                  }\n                }\n              }`;\n    \n    repos = await fetch('http://api.github.com/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: accessToken,\n      },\n      body: JSON.stringify({\n        query: query,\n      }),\n    })\n    .then(res => res.json());\n\n      resultado = repos.data.search;\n        if (resultado.pageInfo.hasNextPage && atual < limite) {\n          after = `, after: \"${resultado.pageInfo.endCursor}\"`;\n          resposta = resposta.concat(resultado.nodes);\n          atual += 10;\n          console.log(\"Dados retornados: \" + atual);\n          await getResultado();\n        } else {\n          csv = JSON.stringify(resposta, replacer);\n          csv = JSON.parse(csv);\n          this.setState({\n            loadButton: true\n          })\n        }\n      } catch (e) {\n        console.log(e);\n        await getResultado();\n      }\n    }\n    getResultado()\n  }\n\n  render() {\n    return (\n      <>\n        <Global/>\n        {receivedToken ? (\n          <section\n          css={{\n            width: '100%',\n            maxWidth: 420,\n            margin: '0 auto',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: 'calc(100vh - 4px)',\n            fontFamily: 'monospace',\n            padding: '0 16px',\n          }}\n        >\n          <div>\n            {this.state.loadButton ? (\n            <CSVLink data={csv} headers={headers} filename={\"repositorios.csv\"}>\n                Download CSV\n            </CSVLink>) :\n            (<h1>Loading...</h1>)}\n          </div>\n          <Button\n            onClick={() => {\n              localStorage.clear();\n              window.location.reload();\n            }}\n            css={{\n              display: 'grid',\n              gridTemplateColumns: '80px repeat(auto-fit, 300px)',\n              height: 'calc(5vh - 4px)',\n              overflow: 'hidden',\n              alignItems: 'center',\n              margin: '20px',\n            }}\n          >\n            SAIR\n        </Button> \n        </section>\n        ) : ( <Login/>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}